package fjn.pythia.analytics.interpolation

import org.specs2.mutable.Specification
import fjn.pythia.matrix.Matrix
import fjn.pythia.plotting.plot2D
import scala.collection.JavaConversions._
import java.io.{BufferedReader, InputStreamReader}

import akka.actor.Actor
import akka.actor.Actor.{actorOf}
import akka.event.EventHandler
import java.util.ArrayList
import akka.dispatch.Future


/*
 * Created by IntelliJ IDEA.
 * User: fran
 * Date: 3/29/12
 * Time: 8:24 PM
 * To change this template use File | Settings | File Templates.
  */
class testNurbs  extends Specification {
  "Creating a optimization test for SWARM" should {

    "Converge to given solution" in {
      `testAlgorithm` mustEqual true
    }

  }

  
  def `testAlgorithm` ={

    val zsHomogeneous:Seq[Double] = Seq(-6.337957751843744, -6.252884493429734, -6.167811235015724, -6.082737976601714, -5.997664718187704, -5.912591459773694, -5.827518201359684, -5.742444942945674, -5.657371684531664, -5.572298426117654, -5.487225167703644, -5.402151909289634, -5.317078650875624, -5.232005392461614, -5.146932134047605, -5.061858875633594, -4.976785617219584, -4.891712358805574, -4.806639100391564, -4.721565841977554, -4.636492583563545, -4.551419325149534, -4.466346066735524, -4.381272808321514, -4.296199549907504, -4.211126291493494, -4.126053033079485, -4.040979774665474, -3.9559065162514644, -3.8708332578374542, -3.785759999423444, -3.7006867410094344, -3.6156134825954243, -3.530540224181414, -3.4454669657674044, -3.3603937073533943, -3.275320448939384, -3.1902471905253744, -3.1051739321113643, -3.020100673697354, -2.9350274152833444, -2.8499541568693343, -2.764880898455324, -2.6798076400413144, -2.5947343816273043, -2.509661123213294, -2.4245878647992845, -2.3395146063852743, -2.254441347971264, -2.1693680895572545, -2.0842948311432448, -1.9992215727292342, -1.9141483143152245, -1.8290750559012148, -1.7440017974872042, -1.6589285390731945, -1.5738552806591848, -1.4887820222451742, -1.4037087638311645, -1.3186355054171548, -1.2335622470031442, -1.1484889885891345, -1.0634157301751248, -0.9783424717611142, -0.8932692133471045, -0.8081959549330948, -0.7231226965190842, -0.6380494381050745, -0.5529761796910648, -0.46790292127705424, -0.38282966286304454, -0.29775640444903484, -0.21268314603502425, -0.12760988762101455, -0.04253662920700485, 0.04253662920700574, 0.12760988762101544, 0.21268314603502514, 0.2977564044490357, 0.38282966286304543, 0.46790292127705513, 0.5529761796910657, 0.6380494381050754, 0.7231226965190851, 0.8081959549330957, 0.8932692133471054, 0.9783424717611151, 1.0634157301751257, 1.1484889885891354, 1.233562247003145, 1.3186355054171557, 1.4037087638311654, 1.488782022245175, 1.5738552806591857, 1.6589285390731954, 1.744001797487206, 1.8290750559012157, 1.9141483143152254, 1.999221572729235, 2.0842948311432448, 2.1693680895572545, 2.254441347971266, 2.3395146063852756, 2.4245878647992853, 2.509661123213295, 2.5947343816273047, 2.6798076400413144, 2.764880898455326, 2.8499541568693356, 2.9350274152833453, 3.020100673697355, 3.1051739321113647, 3.1902471905253744, 3.275320448939386, 3.3603937073533956, 3.4454669657674053, 3.530540224181415, 3.6156134825954247, 3.7006867410094344, 3.785759999423446, 3.8708332578374556, 3.9559065162514653, 4.040979774665475, 4.126053033079485, 4.211126291493494, 4.296199549907506, 4.3812728083215156, 4.466346066735525, 4.551419325149535, 4.636492583563545, 4.721565841977554, 4.806639100391564, 4.8917123588055755, 4.976785617219585, 5.061858875633595, 5.146932134047605, 5.232005392461614, 5.317078650875624, 5.4021519092896355, 5.487225167703645, 5.572298426117655, 5.657371684531665, 5.742444942945674, 5.827518201359684, 5.9125914597736955, 5.997664718187705, 6.082737976601715, 6.167811235015725, 6.252884493429734, 6.337957751843744)

      val strikesHomogeneousAdjusted:Seq[Double] = Seq(65.03228766515917, 67.23207283650159, 69.50633529243983, 71.85759658189272, 74.30885029101235, 77.01693615604427, 79.82379261101573, 82.73302206365054, 85.7483583103928, 88.8736713284784, 92.1129722427855, 95.47041847383788, 98.97286836461438, 102.88047535039263, 106.94245249245878, 111.16489818945936, 115.55415175750109, 120.11680294760478, 124.98213577793234, 130.3173896513658, 135.88050260143845, 141.68120607861897, 147.7296471460853, 154.44876346985933, 161.49198005532935, 168.85650557461287, 176.72983041098527, 185.14885628235004, 193.96907959308902, 203.2824610267949, 213.08700224989013, 223.33254835583494, 233.85684057213143, 244.87720851781364, 255.8749266585954, 267.26525166862564, 278.5267974519954, 289.92227020232366, 301.2202302294853, 312.3514307403989, 323.53085632742386, 334.1695199601804, 345.15807822559174, 355.3753386347634, 365.88934011216406, 376.65713689892004, 387.70007934265436, 398.66752651191575, 409.3185694736984, 419.69083439934025, 429.7164257960729, 439.2367896733563, 448.47821553187185, 457.51823907973596, 465.9657925186788, 474.29191247032117, 482.28421019357774, 490.0193695202592, 497.55941298809176, 504.8460979939525, 511.95646019366774, 518.9324919322518, 525.6502895213745, 532.4318721723625, 538.8044610779317, 545.2533308577072, 551.5571571280848, 557.7066013001755, 563.9246144131059, 569.9238065837122, 575.8963953407907, 581.9315810482294, 587.7675482268702, 593.6171227477279, 599.5249191643646, 605.3043308342774, 611.0903807926223, 616.931744451039, 622.7289004952012, 628.5152194625248, 634.3553092515544, 640.2186358816908, 646.0724267630584, 651.979746250165, 657.9410838226825, 663.9324150994973, 669.978278664444, 676.0792015977356, 682.2651057084114, 688.5232901499681, 694.8388837178458, 701.2502052328767, 707.7966530165196, 714.4042195951856, 721.0863218134466, 727.9987866914009, 734.9775211138901, 742.0231604045807, 749.3550605025658, 756.7855778103674, 764.2897810346299, 772.1184117494474, 780.0820800993781, 788.1278923746625, 796.5674661487395, 805.145540707031, 813.8307670020793, 823.0000414329807, 832.2726317666879, 841.7947794705287, 851.7226104359114, 861.7675349090637, 872.2781458499921, 883.0371343677015, 894.0584941193104, 905.5684885490298, 917.2266709042804, 929.4697624564333, 941.9240626331125, 954.836593090667, 968.103751315812, 982.9160709835418, 999.8082224220637, 1016.9906955235286, 1034.4684799820122, 1052.2466512483593, 1070.3303720040606, 1088.72489366047, 1107.4355578837838, 1126.4677981462344, 1145.8271413039342, 1165.5192092018463, 1185.5497203063408, 1205.9244913657983, 1226.6494390997661, 1247.7305819171377, 1269.17404166387, 1290.9860454007246, 1313.1729272115822, 1335.7411300428116, 1358.6972075742804, 1382.0478261224955, 1405.7997665764678, 1429.9599263668485, 1454.5353214688969, 1479.533088439884, 1504.9604864915134, 1530.8248995979468, 1557.1338386400732, 1583.8949435866318)

      val logStrikeHomogeneousAdjusted:Seq[Double] = Seq(4.174883879874628, 4.208150408022629, 4.24141790370326, 4.274686335285423, 4.308230060256018, 4.344025347746709, 4.379821613037231, 4.415618821770386, 4.451416940794474, 4.487215938121116, 4.523015782884541, 4.558816445302293, 4.594845755651042, 4.633567880914022, 4.672290862607712, 4.711014668220335, 4.749739266473014, 4.788464627273125, 4.828170813312613, 4.869972933793655, 4.911775842148057, 4.953579506133284, 4.995383894825183, 5.039862413310265, 5.084455482329529, 5.129049274810791, 5.174622184607431, 5.2211601300915556, 5.267698762819643, 5.3145964455245895, 5.3617005435789205, 5.408661908886105, 5.454709135709562, 5.500756895183968, 5.544688757351595, 5.588241617195871, 5.629514275391913, 5.669612853267954, 5.70784165910678, 5.744128934497037, 5.779294492166415, 5.811648409010367, 5.844002509846161, 5.873174522864874, 5.902330938264249, 5.931335322449866, 5.960232049326474, 5.988127802642606, 6.014493751327513, 6.03951833164347, 6.063125516245536, 6.085038651881558, 6.10586010848391, 6.125816750761867, 6.144112224818971, 6.161822981231349, 6.178533587981217, 6.194444919956579, 6.20971497255992, 6.224253626380058, 6.238239582739271, 6.251773801357355, 6.264636142809046, 6.277454949816196, 6.289352724156594, 6.301250513926366, 6.312745472721525, 6.323833019976299, 6.334920580176336, 6.345502679233456, 6.35592777531747, 6.36635288248454, 6.376331543591868, 6.386234537036416, 6.396137540183126, 6.405731357727947, 6.415244870969622, 6.424758392909244, 6.4341112723883835, 6.443360243270165, 6.452609222144953, 6.461809736580523, 6.470911613230391, 6.480013497410667, 6.4891153890531275, 6.498180359807333, 6.507245291955661, 6.516310231306846, 6.525418300359699, 6.534549144974889, 6.5436799967012105, 6.552864749504067, 6.56215683918659, 6.571448936033068, 6.5807588552411405, 6.590299381562606, 6.599839915226634, 6.609380456163512, 6.619212917257721, 6.629079960751603, 6.6389470118004725, 6.649137921357931, 6.659399145043894, 6.66966037665651, 6.680311829025683, 6.691023056986308, 6.7017524414418785, 6.712956251020909, 6.7241600695569375, 6.735536254690404, 6.74726089921266, 6.758985553213239, 6.771108347646012, 6.783367254496241, 6.795771202696745, 6.808562910629989, 6.821354629174451, 6.834614275654876, 6.8479246584109505, 6.861540219128964, 6.875339262644468, 6.8905237360173475, 6.90756348301253, 6.924603247062292, 6.941643027878506, 6.958682825177913, 6.975722638682037, 6.992762468117107, 7.009802313213976, 7.0268421737080455, 7.043882049339185, 7.060921939851659, 7.077961844994053, 7.095001764519196, 7.112041698184099, 7.129081645749871, 7.14612160698166, 7.163161581648583, 7.180201569523656, 7.197241570383725, 7.214281584009413, 7.231321610185045, 7.24836164869859, 7.2654016993416, 7.282441761909149, 7.299481836199767, 7.316521922015397, 7.333562019161322, 7.350602127446114, 7.367642246681583)








    val diezmado=1
    var z = Seq[Double]()

      for(i <- 0 until zsHomogeneous.length)
      {

        if(i%diezmado==0)
        {
          z = z ++ Seq( zsHomogeneous(i))

        }

        else if (i== zsHomogeneous.length-1)
                    {
                      z = z ++ Seq( zsHomogeneous(i))
                    }
      }

    val nSamples=z.length

        var qk = Seq[Matrix[Double]]()
        var xAxis = Seq[Double]()


    for(i <- 0 until zsHomogeneous.length)
          {
            if(i%diezmado==0)
            {
              val aux = new Matrix[Double](1,1)
              aux.set(0,0,strikesHomogeneousAdjusted(i))
              qk = qk ++ Seq(aux)
              xAxis = xAxis ++ Seq( strikesHomogeneousAdjusted(i))
            }
            else if (i== zsHomogeneous.length-1)
            {
              val aux = new Matrix[Double](1,1)
                            aux.set(0,0,strikesHomogeneousAdjusted(i))
                            qk = qk ++ Seq(aux)
            }


          }


    val order =2
    val bspline = new Nurbs1D(qk.toSeq,Seq(order))
    bspline.solve(z.toArray);



    var xtotal= Seq[java.util.ArrayList[java.lang.Double]]()
    var ytotal= Seq[java.util.ArrayList[java.lang.Double]]()

    xtotal = xtotal ++ Seq(new java.util.ArrayList[java.lang.Double]())
    ytotal = ytotal ++ Seq(new java.util.ArrayList[java.lang.Double]())

    {
      for(i<- 0 until  1000)
      {
        val t = 1.0/ 1000.toDouble * i.toDouble
        val ax = bspline(t)
        // ax.set(1,0,z(i))

        xtotal.last.add(ax(0,0))
        ytotal.last.add(ax(1,0))

      }



    }

    xtotal = xtotal ++ Seq(new java.util.ArrayList[java.lang.Double]())
    ytotal = ytotal ++ Seq(new java.util.ArrayList[java.lang.Double]())

    {
      for(i<- 0 until  zsHomogeneous.length)
      {



        xtotal.last.add(strikesHomogeneousAdjusted(i))
        ytotal.last.add(zsHomogeneous(i))

      }



    }
//
//    val axtest = bspline(1.0)

    val p = new plot2D("Samples="+nSamples.toString)
    for (i <- 0 until xtotal.length)
    {

      p.AddCurve(xtotal(i),ytotal(i),i.toString);

    }
    val fut =
            Future
                  {
                    p.showPanel()

                  }


    val br = new BufferedReader(new InputStreamReader(System.in));
    br.readLine()



    true
  }

}

